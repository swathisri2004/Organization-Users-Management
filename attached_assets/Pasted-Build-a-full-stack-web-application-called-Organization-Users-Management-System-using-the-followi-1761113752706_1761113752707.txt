Build a full-stack web application called "Organization & Users Management System" using the following technologies:

Frontend:
- React (latest version)
- Tailwind CSS for styling and responsiveness
- Axios for API requests
- Implement loading states and error states for all pages
- Responsive design using Tailwind’s grid system
- Follow the UI design closely as per the attached Figma visuals (spacing, padding, margins, and typography should match)
- Include pages and components for:
  1. Organization List
  2. Add/Edit Organization
  3. User List
  4. Add/Edit User
  5. Dashboard/Home page
  6. Navigation bar and sidebar for easy routing

Backend:
- Python (Django Framework)
- Django REST Framework (DRF) for REST APIs
- CORS setup to connect React frontend
- PostgreSQL database connection
- CRUD operations for Organizations and Users
- API endpoints:
    • /api/organizations/ - List, Create, Update, Delete organizations
    • /api/users/ - List, Create, Update, Delete users
    • /api/memberships/ - Associate users with organizations and roles
- Use serializers and viewsets for APIs
- Implement proper error handling and JSON responses
- Include database migrations and admin panel access

Database:
- PostgreSQL
- Models:
    1. Organization: id, name, address, created_at
    2. User: id, name, email (unique), organization (FK), role, created_at
    3. Membership (optional): user_id (FK), org_id (FK), role, joined_at
- Use Django ORM for database operations

Additional Requirements:
- Host the backend and frontend in separate folders (backend/ and frontend/)
- Add environment variables for database credentials and API base URLs
- Include detailed README with setup and run instructions
- Code should be production-ready and well-structured
- Include comments for clarity
- All UI components should be responsive across devices
- Include sample seed data for testing

Goal:
Generate a complete and functioning full-stack project with the above stack, database, and design. The code should be clean, modular, and deployment-ready.

After generation:
1. Push the final code to a public GitHub repository.
2. Export the ER diagram (Organization–User–Membership) as a PDF.
3. Verify API endpoints via Postman.
